diff --git a/LibOS/Makefile b/LibOS/Makefile
index f524c18..af27746 100644
--- a/LibOS/Makefile
+++ b/LibOS/Makefile
@@ -96,13 +96,13 @@ GLIBC_PATCHES_2.31 = \
 GLIBC_PATCHES += $(GLIBC_PATCHES_$(GLIBC_VERSION))
 
 $(GLIBC_SRC)/configure: $(GLIBC_PATCHES) $(GLIBC_SRC).tar.gz
-	$(RM) -r $(GLIBC_SRC)
-	tar -xzf $(GLIBC_SRC).tar.gz
-	cd $(GLIBC_SRC) && \
-	for p in $(GLIBC_PATCHES); do \
-		echo applying $$p; \
-		patch -p1 < ../$$p || exit 255; \
-	done
+	#$(RM) -r $(GLIBC_SRC)
+	#tar -xzf $(GLIBC_SRC).tar.gz
+	#cd $(GLIBC_SRC) && \
+	#for p in $(GLIBC_PATCHES); do \
+	#	echo applying $$p; \
+	#	patch -p1 < ../$$p || exit 255; \
+	#done
 	touch $@
 
 $(GLIBC_SRC).tar.gz:
diff --git a/LibOS/shim/src/sys/shim_ioctl.c b/LibOS/shim/src/sys/shim_ioctl.c
index e13da05..73a99ea 100644
--- a/LibOS/shim/src/sys/shim_ioctl.c
+++ b/LibOS/shim/src/sys/shim_ioctl.c
@@ -269,11 +269,17 @@ static int ioctl_netdevice(struct shim_handle* hdl, unsigned int cmd, unsigned l
         case SIOCGIFTXQLEN:      /* 0x8942 Get the tx queue length */
         case SIOCSIFTXQLEN:      /* 0x8943 Set the tx queue length  */
         default:
-            goto passthrough;
+            break;
     }
 
-passthrough:
-    return -EAGAIN;
+    int domain = hdl->info.sock.domain;
+    int sock_type = hdl->info.sock.sock_type;
+
+    return DkIoctl(&hdl->pal_handle, cmd, (void*) arg, domain, sock_type);
+
+// passthrough:
+    
+//     return -EAGAIN;
 }
 
 static void signal_io(IDTYPE caller, void* arg) {
diff --git a/Pal/include/pal/pal.h b/Pal/include/pal/pal.h
index 751f895..fe3987f 100644
--- a/Pal/include/pal/pal.h
+++ b/Pal/include/pal/pal.h
@@ -812,4 +812,7 @@ PAL_BOL DkSetProtectedFilesKey(PAL_PTR pf_key_hex);
 PAL_BOL DkCpuIdRetrieve(PAL_IDX leaf, PAL_IDX subleaf, PAL_IDX values[PAL_CPUID_WORD_NUM]);
 #endif
 
+PAL_NUM
+DkIoctl(PAL_HANDLE *handle, PAL_NUM type, PAL_PTR ifr, PAL_NUM domain, PAL_NUM sock_type);
+
 #endif /* PAL_H */
diff --git a/Pal/src/db_misc.c b/Pal/src/db_misc.c
index 974786b..274a9f8 100644
--- a/Pal/src/db_misc.c
+++ b/Pal/src/db_misc.c
@@ -137,3 +137,23 @@ PAL_BOL DkSetProtectedFilesKey(PAL_PTR pf_key_hex) {
     }
     LEAVE_PAL_CALL_RETURN(PAL_TRUE);
 }
+
+
+PAL_NUM
+DkIoctl(PAL_HANDLE *handle, PAL_NUM type, PAL_PTR ifr, PAL_NUM domain, PAL_NUM sock_type) {
+    ENTER_PAL_CALL(DkIoctl);
+
+    if (!ifr) {
+        _DkRaiseFailure(PAL_ERROR_INVAL);
+        LEAVE_PAL_CALL_RETURN(PAL_STREAM_ERROR);
+    }
+
+    int64_t ret = _DkIoctl(handle, type, ifr, domain, sock_type);
+
+    if (ret < 0) {
+        _DkRaiseFailure(-ret);
+        ret = PAL_STREAM_ERROR;
+    }
+
+    LEAVE_PAL_CALL_RETURN(ret);
+}
\ No newline at end of file
diff --git a/Pal/src/host/Linux-SGX/db_misc.c b/Pal/src/host/Linux-SGX/db_misc.c
index d52ba08..42853e4 100644
--- a/Pal/src/host/Linux-SGX/db_misc.c
+++ b/Pal/src/host/Linux-SGX/db_misc.c
@@ -453,3 +453,17 @@ int _DkAttestationQuote(const PAL_PTR user_report_data, PAL_NUM user_report_data
 int _DkSetProtectedFilesKey(const PAL_PTR pf_key_hex) {
     return set_protected_files_key(pf_key_hex);
 }
+
+PAL_NUM
+_DkIoctl(PAL_HANDLE* handle, PAL_NUM type, PAL_PTR ifr, PAL_NUM domain, PAL_NUM sock_type) {
+    int fd = 0;
+    PAL_HANDLE hdl = *handle;
+    if (hdl == NULL) {
+        fd = -1;
+    } else {
+        fd = hdl->ioctl.fd;
+    }
+    // int ret = ocall_ioctl(fd, type, ifr);
+    // return ret;
+    return 0;
+}
\ No newline at end of file
diff --git a/Pal/src/host/Linux-SGX/enclave_ocalls.c b/Pal/src/host/Linux-SGX/enclave_ocalls.c
index 8dcf02e..d8b2da4 100644
--- a/Pal/src/host/Linux-SGX/enclave_ocalls.c
+++ b/Pal/src/host/Linux-SGX/enclave_ocalls.c
@@ -1482,3 +1482,24 @@ out:
     sgx_reset_ustack(old_ustack);
     return retval;
 }
+
+int ocall_ioctl(unsigned int fd, int type, struct ifaddrs* ifr) {
+    ssize_t retval = 0;
+    ms_ocall_ioctl_t* ms;
+
+    void* old_ustack = sgx_prepare_ustack();
+    ms = sgx_alloc_on_ustack_aligned(sizeof(*ms), alignof(*ms));
+    if (!ms) {
+        retval = -EPERM;
+        goto out;
+    }
+
+    WRITE_ONCE(ms->ms_fd, fd);
+    WRITE_ONCE(ms->ms_type, type);
+
+    retval = sgx_exitless_ocall(OCALL_IOCTL, ms);
+
+out:
+    sgx_reset_ustack(old_ustack);
+    return retval;
+}
\ No newline at end of file
diff --git a/Pal/src/host/Linux-SGX/enclave_ocalls.h b/Pal/src/host/Linux-SGX/enclave_ocalls.h
index e5d12ce..8842ad6 100644
--- a/Pal/src/host/Linux-SGX/enclave_ocalls.h
+++ b/Pal/src/host/Linux-SGX/enclave_ocalls.h
@@ -91,6 +91,8 @@ int ocall_load_debug (const char * command);
 
 int ocall_eventfd (unsigned int initval, int flags);
 
+int ocall_ioctl(unsigned int fd, int type, struct ifaddrs* ifr);
+
 /*!
  * \brief Execute untrusted code in PAL to obtain a quote from the Quoting Enclave.
  *
diff --git a/Pal/src/host/Linux-SGX/linux_types.h b/Pal/src/host/Linux-SGX/linux_types.h
index 952a542..43f04d4 100644
--- a/Pal/src/host/Linux-SGX/linux_types.h
+++ b/Pal/src/host/Linux-SGX/linux_types.h
@@ -146,4 +146,34 @@ struct sockaddr_storage {
     char __ss_padding[128 - sizeof(sa_family_t)];
 };
 
+struct ifaddrs
+{
+  struct ifaddrs *ifa_next;     /* Pointer to the next structure.  */
+
+  char *ifa_name;               /* Name of this network interface.  */
+  unsigned int ifa_flags;       /* Flags as from SIOCGIFFLAGS ioctl.  */
+
+  struct sockaddr *ifa_addr;    /* Network address of this interface.  */
+  struct sockaddr *ifa_netmask; /* Netmask of this interface.  */
+  union
+  {
+    /* At most one of the following two is valid.  If the IFF_BROADCAST
+       bit is set in `ifa_flags', then `ifa_broadaddr' is valid.  If the
+       IFF_POINTOPOINT bit is set, then `ifa_dstaddr' is valid.
+       It is never the case that both these bits are set at once.  */
+    struct sockaddr *ifu_broadaddr; /* Broadcast address of this interface. */
+    struct sockaddr *ifu_dstaddr; /* Point-to-point destination address.  */
+  } ifa_ifu;
+  /* These very same macros are defined by <net/if.h> for `struct ifaddr'.
+     So if they are defined already, the existing definitions will be fine.  */
+# ifndef ifa_broadaddr
+#  define ifa_broadaddr ifa_ifu.ifu_broadaddr
+# endif
+# ifndef ifa_dstaddr
+#  define ifa_dstaddr   ifa_ifu.ifu_dstaddr
+# endif
+
+  void *ifa_data;               /* Address-specific data (may be unused).  */
+};
+
 #endif
diff --git a/Pal/src/host/Linux-SGX/ocall_types.h b/Pal/src/host/Linux-SGX/ocall_types.h
index be0710e..c537019 100644
--- a/Pal/src/host/Linux-SGX/ocall_types.h
+++ b/Pal/src/host/Linux-SGX/ocall_types.h
@@ -60,6 +60,7 @@ enum {
     OCALL_EVENTFD,
     OCALL_GET_QUOTE,
     OCALL_NR,
+    OCALL_IOCTL,
 };
 
 typedef struct {
@@ -279,4 +280,9 @@ typedef struct {
     size_t            ms_quote_len;
 } ms_ocall_get_quote_t;
 
+typedef struct {
+    int               ms_fd;
+    bool              ms_type;
+} ms_ocall_ioctl_t;
+
 #pragma pack(pop)
diff --git a/Pal/src/host/Linux-SGX/pal_host.h b/Pal/src/host/Linux-SGX/pal_host.h
index b40813f..ef8d6db 100644
--- a/Pal/src/host/Linux-SGX/pal_host.h
+++ b/Pal/src/host/Linux-SGX/pal_host.h
@@ -160,6 +160,11 @@ typedef struct pal_handle
                 PAL_BOL isnotification;
             } event;
         };
+
+        struct {
+            PAL_IDX fd;
+        } ioctl;
+
     };
 } * PAL_HANDLE;
 
diff --git a/Pal/src/host/Linux/db_misc.c b/Pal/src/host/Linux/db_misc.c
index 85a5090..2a1e345 100644
--- a/Pal/src/host/Linux/db_misc.c
+++ b/Pal/src/host/Linux/db_misc.c
@@ -153,3 +153,27 @@ int _DkSetProtectedFilesKey(PAL_PTR pf_key_hex) {
     __UNUSED(pf_key_hex);
     return -PAL_ERROR_NOTIMPLEMENTED;
 }
+
+PAL_NUM
+_DkIoctl(PAL_HANDLE* handle, PAL_NUM type, PAL_PTR ifr, PAL_NUM domain, PAL_NUM sock_type) {
+    int fd = 0;
+    // if (!handle) {
+        // handle = malloc(HEADER_SIZE(ioctl));
+        // PAL_HANDLE new_handle = malloc(HANDLE_SIZE(ioctl));
+        fd = INLINE_SYSCALL(socket, 3, domain, sock_type, 0);
+        // new_handle->ioctl.fd = fd;
+        // *handle = new_handle;
+    // }
+
+    // fd = (*handle)->ioctl.fd;
+
+    if (fd < 0) {
+        return -1;
+    }
+
+    int ret = INLINE_SYSCALL(ioctl, 3, fd, type, ifr);
+    
+    INLINE_SYSCALL(close, 1, fd);
+
+    return ret;
+}
\ No newline at end of file
diff --git a/Pal/src/host/Linux/db_sockets.c b/Pal/src/host/Linux/db_sockets.c
index 05f79ef..daceeed 100644
--- a/Pal/src/host/Linux/db_sockets.c
+++ b/Pal/src/host/Linux/db_sockets.c
@@ -302,7 +302,7 @@ static bool check_any_addr(struct sockaddr* addr) {
     if (addr->sa_family == AF_INET) {
         struct sockaddr_in* addr_in = (struct sockaddr_in*)addr;
 
-        return addr_in->sin_port == 0 && check_zero(&addr_in->sin_addr, sizeof(addr_in->sin_addr));
+        return addr_in->sin_port == 0 || check_zero(&addr_in->sin_addr, sizeof(addr_in->sin_addr));
     } else if (addr->sa_family == AF_INET6) {
         struct sockaddr_in6* addr_in6 = (struct sockaddr_in6*)addr;
 
diff --git a/Pal/src/host/Linux/pal_host.h b/Pal/src/host/Linux/pal_host.h
index 42d9e65..898c4d6 100644
--- a/Pal/src/host/Linux/pal_host.h
+++ b/Pal/src/host/Linux/pal_host.h
@@ -144,6 +144,10 @@ typedef struct pal_handle
             struct atomic_int nwaiters;
             PAL_BOL isnotification;
         } event;
+
+        struct {
+            PAL_IDX fd;
+        } ioctl;
     };
 } * PAL_HANDLE;
 
diff --git a/Pal/src/host/Skeleton/db_misc.c b/Pal/src/host/Skeleton/db_misc.c
index f57fca1..4996f94 100644
--- a/Pal/src/host/Skeleton/db_misc.c
+++ b/Pal/src/host/Skeleton/db_misc.c
@@ -75,3 +75,11 @@ int _DkSetProtectedFilesKey(PAL_PTR pf_key_hex) {
     __UNUSED(pf_key_hex);
     return -PAL_ERROR_NOTIMPLEMENTED;
 }
+
+PAL_NUM
+_DkIoctl(PAL_HANDLE* handle, PAL_NUM type, PAL_PTR ifr, PAL_NUM domain, PAL_NUM sock_type) {
+    __UNUSED(handle);
+    __UNUSED(type);
+    __UNUSED(ifr);
+    return -PAL_ERROR_NOTIMPLEMENTED;
+}
\ No newline at end of file
diff --git a/Pal/src/pal-symbols b/Pal/src/pal-symbols
index 0543842..a0577ca 100644
--- a/Pal/src/pal-symbols
+++ b/Pal/src/pal-symbols
@@ -46,6 +46,7 @@ DkDebugDetachBinary
 DkAttestationReport
 DkAttestationQuote
 DkSetProtectedFilesKey
+DkIoctl
 pal_printf
 pal_control_addr
 pal_strerror
diff --git a/Pal/src/pal_internal.h b/Pal/src/pal_internal.h
index 0842f00..3126e97 100644
--- a/Pal/src/pal_internal.h
+++ b/Pal/src/pal_internal.h
@@ -347,4 +347,6 @@ static inline void print_error(const char* errstring, int errval) {
     printf("%s (%s)\n", errstring, pal_strerror(errval));
 }
 
+PAL_NUM _DkIoctl(PAL_HANDLE *handle, PAL_NUM type, PAL_PTR ifr, PAL_NUM domain, PAL_NUM sock_type);
+
 #endif
