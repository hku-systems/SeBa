# This is a general manifest template for running Bash and core utility programs,
# including ls, cat, cp, date, and rm.
#
# This manifest was prepared and tested on Ubuntu 16.04.

# The executable to load in Graphene. We replace EXECPATH and ARGV0_OVERRIDE for
# each program that a manifest is generated for.
loader.exec = file:/home/ubuntu/graphene/Examples/libgcrypt/libgcrypt-1.8.6/tests/prime
# loader.argv0_override = prime

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Graphene environment, including the path of the library OS and the debug
# option (inline/none).
loader.preload = file:/home/ubuntu/graphene/Runtime/libsysdb.so
loader.debug_type = none

# Environment variables
loader.env.LD_LIBRARY_PATH = /lib:/lib/x86_64-linux-gnu

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = chroot
fs.mount.lib.path = /lib
fs.mount.lib.uri = file:/home/ubuntu/graphene/Runtime

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by Bash
fs.mount.lib2.type = chroot
fs.mount.lib2.path = /lib/x86_64-linux-gnu
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

fs.mount.libgcrypt.type = chroot
fs.mount.libgcrypt.path = /home/ubuntu/graphene/Examples/libgcrypt/libgcrypt-1.8.6/src/.libs
fs.mount.libgcrypt.uri = file:/home/ubuntu/graphene/Examples/libgcrypt/libgcrypt-1.8.6/src/.libs

# Mount /bin
# fs.mount.bin.type = chroot
#fs.mount.bin.path = /bin
#fs.mount.bin.uri = file:/bin

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If the program needs more virtual
# memory than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = 256M

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 4

# SGX trusted libraries

# Glibc libraries
sgx.trusted_files.ld = file:/home/ubuntu/graphene/Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:/home/ubuntu/graphene/Runtime/libc.so.6
sgx.trusted_files.libm = file:/home/ubuntu/graphene/Runtime/libm.so.6
sgx.trusted_files.libdl = file:/home/ubuntu/graphene/Runtime/libdl.so.2
sgx.trusted_files.librt = file:/home/ubuntu/graphene/Runtime/librt.so.1
sgx.trusted_files.libutil = file:/home/ubuntu/graphene/Runtime/libutil.so.1
sgx.trusted_files.libpthread = file:/home/ubuntu/graphene/Runtime/libpthread.so.0

# Name Service Switch (NSS) libraries (Glibc dependencies)
# sgx.trusted_files.libnsscompat = file:/lib/x86_64-linux-gnu/libnss_compat.so.2
# sgx.trusted_files.libnssfiles = file:/lib/x86_64-linux-gnu/libnss_files.so.2
# sgx.trusted_files.libnssnis = file:/lib/x86_64-linux-gnu/libnss_nis.so.2

sgx.trusted_files.libgpgerror = file:/lib/x86_64-linux-gnu/libgpg-error.so.0
sgx.trusted_files.libgcrypt = file:/home/ubuntu/graphene/Examples/libgcrypt/libgcrypt-1.8.6/src/.libs/libgcrypt.so

# Additional libs opened by Bash at runtime
# sgx.trusted_files.libselinux1 = file:/lib/x86_64-linux-gnu/libselinux.so.1
# sgx.trusted_files.libpcre = file:/lib/x86_64-linux-gnu/libpcre.so.3
# sgx.trusted_files.libacl = file:/lib/x86_64-linux-gnu/libacl.so.1
# sgx.trusted_files.libattr = file:/lib/x86_64-linux-gnu/libattr.so.1

# Other required libraries


# Signatures of child enclaves


# sgx.allowed_files.scripts = file:scripts

sgx.zero_heap_on_demand = 1
